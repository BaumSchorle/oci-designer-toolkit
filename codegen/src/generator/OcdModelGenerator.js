/*
** Copyright (c) 2020, 2022, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdCodeGenerator } from './OcdCodeGenerator.js'

export class OcdModelGenerator extends OcdCodeGenerator {
    constructor () {
        super()
        this.ignoreAttributes = [...this.commonElements, ...this.commonIgnoreElements]
    }

    content = (resource, schema) => {
        const interfaces = this.getSchemaObjects(schema)
        const contents = `
${this.copyright()}
${this.autoGeneratedWarning()}

import { ${this.prefix}Resource } from "../${this.prefix}Resource"

export interface ${this.generateInterfaceName(resource)} extends ${this.prefix}Resource {
    ${Object.entries(schema.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(k)).map(([k, a]) => this.interfaceAttributeDefinition(k, a)).join('\n    ')}
}

${interfaces.map(i => this.interface(i)).join('')}

export namespace ${this.generateNamespaceName(resource)} {
    export function newResource(): ${this.generateInterfaceName(resource)} {
        return {
            ...OciResource.newResource('${resource}'),
            ${Object.entries(schema.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(k)).map(([k, a]) => this.namespaceAttributeAssignment(resource, k, a)).join(',\n            ')}
        }
    }
    ${interfaces.map(i => this.namespaceFunction(resource, i)).join('')}
}

export class ${this.generateClassName(resource)} {
    static new(): ${this.generateInterfaceName(resource)} {
        return ${this.generateNamespaceName(resource)}.newResource()
    }
}

export default ${this.generateClassName(resource)}
`
        return contents
    }

    interfaceAttributeDefinition = (name, attribute) => {
        if (attribute.type === 'string')      return `${this.toCamelCase(name)}${attribute.required ? '' : '?'}: string`
        else if (attribute.type === 'bool')   return `${this.toCamelCase(name)}${attribute.required ? '' : '?'}: boolean`
        else if (attribute.type === 'number') return `${this.toCamelCase(name)}${attribute.required ? '' : '?'}: number`
        else if (attribute.type === 'object') return `${this.toCamelCase(name)}${attribute.required ? '' : '?'}: ${this.generateInterfaceName(name)}`
        else if (attribute.type === 'list')   return `${this.toCamelCase(name)}${attribute.required ? '' : '?'}: ${attribute.subtype}[]`
        else if (attribute.type === 'set')   return `${this.toCamelCase(name)}${attribute.required ? '' : '?'}: ${attribute.subtype}[]`
        else if (attribute.type === 'map')    return `${this.toCamelCase(name)}${attribute.required ? '' : '?'}: {[key: string]: string}`
        else return ''
    }

    namespaceAttributeAssignment = (resource, name, attribute) => {
        if (attribute.type === 'string')      return `${this.toCamelCase(name)}: ''`
        else if (attribute.type === 'bool')   return `${this.toCamelCase(name)}: false`
        else if (attribute.type === 'number') return `${this.toCamelCase(name)}: 0`
        else if (attribute.type === 'object') return `${this.toCamelCase(name)}: ${this.generateNamespaceName(resource)}.${this.namespaceFunctionName(name)}()`
        else if (attribute.type === 'list')   return `${this.toCamelCase(name)}: []`
        else if (attribute.type === 'set')   return `${this.toCamelCase(name)}: []`
        else if (attribute.type === 'map')    return `${this.toCamelCase(name)}: {}`
        else return ''
    }

    interface = (i) => {
        return `
export interface ${this.generateInterfaceName(i.name)} {
    ${Object.entries(i.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(k)).map(([k, a]) => this.interfaceAttributeDefinition(k, a)).join('\n    ')}
}
`
    }

    namespaceFunction = (resource, i) => {
        return `
    export function ${this.namespaceFunctionName(i.name)}(): ${this.generateInterfaceName(i.name)} {
        return {
            ${Object.entries(i.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(k)).map(([k, a]) => this.namespaceAttributeAssignment(resource, k, a)).join(',\n            ')}
        }
    }
`
    }

    namespaceFunctionName = (name) => `new${this.generateInterfaceName(name)}`
}

export default OcdModelGenerator
